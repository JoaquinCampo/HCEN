stages:
  - build
  - deploy

variables:
  AWS_REGION: "sa-east-1"
  ECR_REPOSITORY: "tse-lab-app"
  DOCKER_TLS_CERTDIR: "" # allows docker:dind to run without TLS issues
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: overlay2

build-image:
  stage: build
  image: public.ecr.aws/docker/library/docker:24
  services:
    - name: public.ecr.aws/docker/library/docker:24-dind
      command: ["--tls=false"]
  before_script:
    - apk add --no-cache curl jq
    - aws --version || apk add --no-cache aws-cli
    - >
      eval $(aws sts assume-role
        --role-arn "$AWS_ASSUME_ROLE_ARN"
        --role-session-name "gitlab-ci-session"
        --duration-seconds 3600
        --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
        --output text | awk '{print "export AWS_ACCESS_KEY_ID="$1"\nexport AWS_SECRET_ACCESS_KEY="$2"\nexport AWS_SESSION_TOKEN="$3}')
      || true
    - |
      aws ecr get-login-password --region "$AWS_REGION" \
      | docker login --username AWS --password-stdin "$CI_AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  script:
    - IMAGE_URI="$CI_AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY"
    - docker build -t "$IMAGE_URI:$CI_COMMIT_SHA" .
    - docker tag "$IMAGE_URI:$CI_COMMIT_SHA" "$IMAGE_URI:latest"
    - docker push "$IMAGE_URI:$CI_COMMIT_SHA"
    - docker push "$IMAGE_URI:latest"

deploy:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$EC2_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
  script:
    - |
      ssh ec2-user@"$EC2_HOST" <<'EOF'
      set -e
      cd /opt/practico
      sudo docker compose pull
      sudo docker compose up -d
      EOF
  needs:
    - job: build-image
  environment:
    name: production
  only:
    - main
